#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <mpi.h>
#include <hdf5.h>
#include <hdf5_hl.h>
#include <complex.h>


void restoreIntMeta(char *fileName,char *dataName,int *data,int dataCnt);
void restoreDoubleMeta(char *fileName,char *dataName,double *data,int dataCnt);
void restore_ptclCnt_attr_HDF(int *cnt,char *fileName,char *groupName,char *dataName,char *attrName);
void restore_Field_HDF(double *data,char *fileName,char *dataName,int sliceN,int subCnt,int start,int N);

void main(int argc, char *argv[])
{
   int mode,initial,final,timeStep,division,step,i,j,sliceN,h,harmony,n;
   int subP,nx,ny,N,sum,*subCnt,*start;
   double theta,z,dz,bucketZ,minZ,sumDouble,real,imag,powerCoef;
   double *U,*Ez;
   char fileName[100],dataName[100],groupName[100],attrName[100],outFile[100];
   FILE *out;
   int myrank, nTasks;
   MPI_Status status;

   if(argc<5) {
      printf("felField mode division initial final step\n");
      exit(0);
   } else ;

   MPI_Init(&argc,&argv);
   MPI_Comm_size(MPI_COMM_WORLD, &nTasks);
   MPI_Comm_rank(MPI_COMM_WORLD, &myrank);

   mode=atoi(argv[1]);
   division=atoi(argv[2]);
   initial=atoi(argv[3]);
   final=atoi(argv[4]);
   timeStep=atoi(argv[5]);

   if(mode==0)  {
      
   }
   else ;

   for(step=initial; step<=final; step+=timeStep)
   {
      sprintf(fileName,"field%d.h5",step);
      restoreIntMeta(fileName,"sliceN",&sliceN,1);
      restoreIntMeta(fileName,"harmony",&harmony,1);
      restoreIntMeta(fileName,"nx",&nx,1);
      restoreIntMeta(fileName,"ny",&ny,1);
      restoreDoubleMeta(fileName,"minZ",&minZ,1);
      restoreDoubleMeta(fileName,"dz",&dz,1);
      restoreDoubleMeta(fileName,"bucketZ",&bucketZ,1);
      restoreDoubleMeta(fileName,"powerCoef",&powerCoef,1);

      subCnt=(int *)malloc(division*sizeof(int ));
      start=(int *)malloc(division*sizeof(int ));
      subP=sliceN/division;
      for(i=0; i<division-1; i++) 
	subCnt[i]=subP;
      subCnt[division-1]=sliceN-subP*(division-1);
      start[0]=0;
      sum=0;
      for(n=0; n<division; n++) {
	 start[n]=sum;
         sum+=subCnt[n];
      }

      for(h=0; h<harmony; h++) {
	sprintf(outFile,"%dField%d",h,step);	
        out=fopen(outFile,"w");

	sprintf(dataName,"U%d",h);	
        for(n=0; n<division; n++) {
          N=nx*ny*2;
          U=(double *)malloc(N*subCnt[n]*sizeof(double ));  

          restore_Field_HDF(U,fileName,dataName,sliceN,subCnt[n],start[n],N);

	  for(i=0; i<subCnt[n]; i++) {
            z=(i+start[n])*bucketZ+step*dz+minZ;
	    sumDouble=0.0;
            for(j=0; j<nx*ny; j++) {
	      real=U[i*N+j*2+0];
	      imag=U[i*N+j*2+1];
	      sumDouble+=real*real+imag*imag;
	    if(sumDouble>1)
	    printf("i=%d,sumDouble=%g, real=%g,imag=%g\n",i,sumDouble,real,imag);
	    }
	    fprintf(out,"%.15g %g\n",z,sumDouble*powerCoef);
	  }

	  free(U);
        } 
	printf("%s is made.\n",outFile);
      }

//      for(i=0; i<division; i++) 
//      printf("step=%d,subCnt[%d]=%d, start[%d]=%d\n",step,i,subCnt[i],i,start[i]);

      free(subCnt);
      free(start);
   }

}

void restoreIntMeta(char *fileName,char *dataName,int *data,int dataCnt)
{
  hid_t file_id,dset_id,filespace;
  hsize_t metaDim[1];
  herr_t status;

  metaDim[0]=dataCnt;

  file_id=H5Fopen(fileName,H5F_ACC_RDWR,H5P_DEFAULT);
  filespace=H5Screate_simple(1,metaDim,NULL);
  dset_id=H5Dopen2(file_id,dataName,H5P_DEFAULT);
  status=H5Dread(dset_id,H5T_NATIVE_INT,H5S_ALL,H5S_ALL,H5P_DEFAULT,data);
  H5Dclose(dset_id);
  H5Sclose(filespace);
  H5Fclose(file_id);
}

void restoreDoubleMeta(char *fileName,char *dataName,double *data,int dataCnt)
{
  hid_t file_id,dset_id,filespace;
  hsize_t metaDim[1];
  herr_t status;

  metaDim[0]=dataCnt;

  file_id=H5Fopen(fileName,H5F_ACC_RDWR,H5P_DEFAULT);
  filespace=H5Screate_simple(1,metaDim,NULL);
  dset_id=H5Dopen2(file_id,dataName,H5P_DEFAULT);
  status=H5Dread(dset_id,H5T_NATIVE_DOUBLE,H5S_ALL,H5S_ALL,H5P_DEFAULT,data);
  H5Dclose(dset_id);
  H5Sclose(filespace);
  H5Fclose(file_id);
}

void restore_Field_HDF(double *data,char *fileName,char *dataName,int sliceN,int subCnt,int start,int N)
{
   hid_t file_id,group_id,plist_id,dset_id,attr_id,as_id;
   hid_t filespace,memspace;
   hsize_t dimsf[2],offset[2],stride[2],block[2],count[2];
   herr_t ierr;

   //open file
   file_id=H5Fopen(fileName,H5F_ACC_RDWR,H5P_DEFAULT);

   //set dataset
   dset_id=H5Dopen2(file_id,dataName,H5P_DEFAULT);

   //open a group
//   group_id=H5Gopen2(file_id,groupName,H5P_DEFAULT);

   //file space
   dimsf[0]=sliceN;
   dimsf[1]=N;
   filespace=H5Screate_simple(2,dimsf,NULL);

   //file space
   dimsf[0]=subCnt;
   dimsf[1]=N;
   memspace=H5Screate_simple(2,dimsf,NULL);

   stride[0]=1;   stride[1]=1;
   count[0]=1;    count[1]=1;

   //hyperslab in file space
   block[0]=subCnt;  block[1]=1;
   offset[0]=start;  offset[1]=0;
   H5Sselect_hyperslab(filespace,H5S_SELECT_SET,offset,stride,count,block);

   //hyperslab in memory space
   offset[0]=0;  offset[1]=0;
//   offset[0]=start;  offset[1]=0;
   H5Sselect_hyperslab(memspace,H5S_SELECT_SET,offset,stride,count,block);

   //read the dataset
//   plist_id=H5Pcreate(H5P_DATASET_XFER);
//   H5Pset_dxpl_mpio(plist_id,H5FD_MPIO_INDEPENDENT);
//   H5Dwrite(dset_id,H5T_NATIVE_DOUBLE,memspace,dataspace,plist_id,data);
   H5Dread(dset_id,H5T_NATIVE_DOUBLE,memspace,filespace,H5P_DEFAULT,data);

//   H5Pclose(plist_id);
   H5Dclose(dset_id);
   H5Sclose(memspace);
   H5Sclose(filespace);
   //close the file
//   H5Gclose(group_id);
   H5Fclose(file_id);
}

void restore_ptclCnt_attr_HDF(int *cnt,char *fileName,char *groupName,char *dataName,char *attrName)
{
   int myrank, nTasks;
   MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
   MPI_Comm_size(MPI_COMM_WORLD, &nTasks);

   hid_t file_id,group_id,plist_id,dataset_id,attribute_id,dataspace_id;
   hsize_t dims;
   herr_t ierr;

   //open file
   file_id=H5Fopen(fileName,H5F_ACC_RDWR,H5P_DEFAULT);
//   ierr=H5Pclose(plist_id);

   //open a group
   group_id=H5Gopen2(file_id,groupName,H5P_DEFAULT);

   //Open an existing dataset.
   dataset_id = H5Dopen2(group_id,dataName,H5P_DEFAULT);

   // Create dataspace for attribute  
//   dims=1;
//   dataspace_id=H5Screate_simple(1,&dims,NULL);

   // open a dataset attribute
   attribute_id=H5Aopen(dataset_id,attrName,H5P_DEFAULT);

   // read the dataset
   H5Aread(attribute_id,H5T_NATIVE_INT,cnt);

   H5Aclose(attribute_id);
//   H5Sclose(dataspace_id);
   H5Dclose(dataset_id);
   H5Gclose(group_id);
   H5Fclose(file_id);
}
